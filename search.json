[{"title":"Android 图像加工","url":"/2022/05/19/Android-Graph-Process/","content":"","categories":["Android"],"tags":["Android"]},{"title":"Android ConstraintLayout布局详解","url":"/2022/05/19/Android-ConstraintLayout/","content":"文本基准线对齐app:layout_constraintBaseline_toBaselineOf\n\n两个view的高度不同，使它们的文本处于同一高度\n角度定位用一个角度和一个距离来约束两个控件的中心\n&lt;TextView        android:id=&quot;@+id/tv1&quot;        ... /&gt;    &lt;TextView        android:id=&quot;@+id/tv2&quot;        ...        app:layout_constraintCircle=&quot;@+id/tv1&quot;        app:layout_constraintCircleAngle=&quot;120&quot;        app:layout_constraintCircleRadius=&quot;150dp&quot; /&gt;\n\n先设置指向的组件，另外两个属性分别代表该组件在指向组件的120°和150dp的位置\n边距marginLinearLayout中可以直接使用，但是在ConstraintLayout中必须要先确定该组件的位置才可以使用边距\ngoneMargin指控件的可见性被设置为gone时的边距值\n居中和偏移水平居中app:layout_constraintLeft_toLeftOf=&quot;parent&quot;app:layout_constraintRight_toRightOf=&quot;parent&quot;\n\n垂直居中app:layout_constraintTop_toTopOf=&quot;parent&quot;app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n\n居中上面四句都用\n水平偏移app:layout_constraintHorizontal_bias \n\n值为0~1之间，0.5指在中间，0为最左侧，1为最右侧，以此类推\n垂直偏移app:layout_constraintVertical_bias \n\n同理\n尺寸约束当使用wrap_content时，可设置以下属性\nandroid:minWidth 最小的宽度android:minHeight 最小的高度android:maxWidth 最大的宽度android:maxHeight 最大的高度\n\n宽高比app:layout_constraintDimensionRatio\n\n链\n&lt;TextView        android:id=&quot;@+id/tv1&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;        app:layout_constraintRight_toLeftOf=&quot;@+id/tv2&quot; /&gt;    &lt;TextView        android:id=&quot;@+id/tv2&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:layout_constraintLeft_toRightOf=&quot;@+id/tv1&quot;        app:layout_constraintRight_toLeftOf=&quot;@+id/tv3&quot;        app:layout_constraintRight_toRightOf=&quot;parent&quot; /&gt;    &lt;TextView        android:id=&quot;@+id/tv3&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:layout_constraintLeft_toRightOf=&quot;@+id/tv2&quot;        app:layout_constraintRight_toRightOf=&quot;parent&quot; /&gt;\n\n样式在链头设置layout_constraintHorizontal_chainStyle设置链的样式\nCHAIN_SPREAD —— 展开元素 (默认)；CHAIN_SPREAD_INSIDE —— 展开元素，但链的两端贴近parent；CHAIN_PACKED —— 链的元素将被打包在一起\n\n权重layout_constraintHorizontal_weight水平权重\nlayout_constraintVertical_weight竖直权重\nBarrier\n假设有3个控件ABC，C在AB的右边，但是AB的宽是不固定的，这个时候C无论约束在A的右边或者B的右边都不对。当出现这种情况可以用Barrier来解决。Barrier可以在多个控件的一侧建立一个屏障\n\n这个时候C只要约束在Barrier的右边就可以了，代码如下：\n&lt;TextView        android:id=&quot;@+id/TextView1&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot; /&gt;    &lt;TextView        android:id=&quot;@+id/TextView2&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:layout_constraintTop_toBottomOf=&quot;@+id/TextView1&quot; /&gt;    &lt;android.support.constraint.Barrier        android:id=&quot;@+id/barrier&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:barrierDirection=&quot;right&quot;        app:constraint_referenced_ids=&quot;TextView1,TextView2&quot; /&gt;    &lt;TextView        android:id=&quot;@+id/TextView3&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:layout_constraintLeft_toRightOf=&quot;@+id/barrier&quot; /&gt;\n\nGroup常用于控制多个控件的可见性\n&lt;TextView        android:id=&quot;@+id/TextView1&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot; /&gt;    &lt;TextView        android:id=&quot;@+id/TextView2&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:layout_constraintLeft_toRightOf=&quot;@+id/TextView1&quot; /&gt;    &lt;TextView        android:id=&quot;@+id/TextView3&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:layout_constraintLeft_toRightOf=&quot;@id/TextView2&quot; /&gt;\n\n有3个并排的TextView，用Group把TextView1和TextView3归为一组，再设置这组控件的可见性\n&lt;android.support.constraint.Group        android:id=&quot;@+id/group&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        android:visibility=&quot;invisible&quot;        app:constraint_referenced_ids=&quot;TextView1,TextView3&quot; /&gt;\n","tags":["Android","View"]},{"title":"Hexo图片一直显示加载中（已解决）","url":"/2022/05/19/Hexo-Photo-Load/","content":"不同人的情况不同，但我希望我的方法对你有用！\n当使用Hexo在博文中添加图片时，网页却一直显示正在加载的图片\n根据前人经验，我们会把_config.yml 文件中的post_asset_folder 设为 true，能看到这篇博文应该都知道作用了，就是在执行hexo new &#123;filename&#125;时，在该文件夹创建一个和md文件同名的文件夹用于存储图片等。\n如果md编辑器是typora，进入设置的图像界面（大部分人用的都是Typora），我们可以选择当复制添加图片时将该图片保存，就不用管照片手动添加到对应的文件家中了\n做法是 复制到指定路径 + ./$&#123;filename&#125;/即可（会自动创建文件夹，所以前面的post_asset_folder可以不选\n\n当我们引用图片时，此时应该显示的是如下图所示\n\n但问题是在typora可以看到图片但是在网页却会显示正在加载中，为什么呢？\n原因F12看一下，可以看到显示在前面的是正在加载的图片，后面则是我们图片存放的路径也就是之前typora中相同的路径。\n\n故问题出现，稍微了解了hexo的目录结构，就会知道这张正在加载中的图片loading.svg存放的位置其实并不是在我们初始化hexo的根目录中，而是在./theme/&#123;theme&#39;s name&#125;/source/image的目录中，而我们之前存放的位置是在根目录中的./source/_posts/这个目录中，也就是说data-src开始所处的目录其实并不在我们要求的目录中，怪怪怪！\n解决方法OK，那就很简单了。那就换个地方存呗。\n将错就错，图片不存在根目录的source了，存在theme的source中就好了。难为typora了。。。毕竟如果typora不是拿来写hexo的博文的话，写其他md文件添加图片就不能直接复制了。不过也就写写博文，无所谓了\n修改的typora图像保存路径是../../themes/keep/source/images/$&#123;filename&#125;/。在images后面新建了对应的文件夹。\n然后再修改typora文件中的地址，把/images前面的全删了就ok了\n\n再去打开网页就可以加载出图片了(typora中图片就显示不出来了)\n（前面提到的post_asset_folder也可以改为false，制造空的文件夹了，不过无伤大雅）\n结语形成的主要原因还是存图片时会把根目录设置在theme里了，难崩。。。\n","tags":["Hexo"]},{"title":"Android dp和px转换","url":"/2022/05/19/Android-dp-and-px/","content":"object DimenUtils &#123;    fun dp2px(context:Context,dp:Float):Float=dp * context.resources.displayMetrics.density    fun px2dp(context:Context,px:Float):Float =px / context.resources.displayMetrics.density&#125;\n\n","categories":["Android"],"tags":["Android"]},{"title":"2022.5.18字节客户端实习一面凉了","url":"/2022/05/19/ByteDance-Client-Intern-Interview/","content":"本人双非大二非科班，侥幸参与了字节杭州的面试\n操作系统进程和线程\n进程的通信方式\n虚拟内存\n锁及其详解\n分页和分段\n计算机网络TCP&#x2F;IP五层及其作用\ntcp和udp的区别\ntcp三次握手过程，为什么不是两次握手或四次握手\ntcp为什么稳定\nIP协议哪一层\n数据链路层的数据和其他层有什么区别？用的什么协议得到它？\nhttps为什么安全\n计算机组成原理早年学的，没准备，全忘了，问了个问题后就没问了\nJava，Kotlinkotlin有没有三元操作符？那用什么代替？\n怎么写单例类，Kotlin 的单例类\n初始化函数，什么时候启动\n类的初始化\njava不添加修饰符public private protected，默认情况下是什么\n线程\nsynchronized和volatile（扩展了很多，问麻了）\n协程\n同步和异步\nkotlin的var和val，空安全\nequals和hashcode，equals和hashcode其中一个相等另一个的对应关系\n反射\nJVM内存\n装箱和拆箱\nGC ROOTS有哪些\n四种引用类型，弱引用什么时候会销毁？没有GCROOTS指向，强引用会销毁吗\n数据结构，算法栈，堆，队列区别\ndfs对应什么数据结构，bfs呢\nAndroid四大组件\n广播的注册方式，区别\nactivity，fragment的生命周期，从activityA中打开ActivityB的生命周期变化\n为什么RecyclerView要用ViewHolder\nHandler机制，Looper内部\n自定义View\n第三方库\n算法合并两个有序链表\n这种简单题我没做出来。八股从四点问到五点，只能说肚子很不争气，第一次面试真的有点急躁，裂开了呀。事后很快就AK……一生耻辱\n反问面试官这时才说他是我学长:cry:,难崩，就这个算法没脸见学长\n字节会转型Flutter吗？趋势\n这次面试让我意识到了我的菜。。。问了很多内容，还有很多想不起来。但八股还算简单，都准备到了。没想起来的都是扩展的。。。\n","categories":["面经"],"tags":["面经"]},{"title":"Android-Spinner","url":"/2022/05/20/Android-Spinner/","content":"XML布局添加spinner&lt;Spinner    android:id=&quot;@+id/planets_spinner&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot; /&gt;\n\n填充Spinner通过SpinnerAdapter提供Spinner的选项。若通过数组获取选项，提供方式应为 ArrayAdapter；若通过数据库查询获取选项，提供方式应为 CursorAdapter\n通过资源文件实现&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;    &lt;string-array name=&quot;planets_array&quot;&gt;        &lt;item&gt;Mercury&lt;/item&gt;        &lt;item&gt;Venus&lt;/item&gt;        &lt;item&gt;Earth&lt;/item&gt;        &lt;item&gt;Mars&lt;/item&gt;        &lt;item&gt;Jupiter&lt;/item&gt;        &lt;item&gt;Saturn&lt;/item&gt;        &lt;item&gt;Uranus&lt;/item&gt;        &lt;item&gt;Neptune&lt;/item&gt;    &lt;/string-array&gt;&lt;/resources&gt;\n\nval spinner: Spinner = findViewById(R.id.spinner)//配置AdapterArrayAdapter.createFromResource(        this,        R.array.planets_array,\t//资源        android.R.layout.simple_spinner_item\t//每个选择框的布局条件).also &#123; adapter -&gt;    // Specify the layout to use when the list of choices appears    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)    // Apply the adapter to the spinner    spinner.adapter = adapter&#125;\n\n代码实现val cardArray = arrayOf(&quot;圆角与阴影均为3&quot;, &quot;圆角与阴影均为6&quot;, &quot;圆角与阴影均为10&quot;, &quot;圆角与阴影均为15&quot;, &quot;圆角与阴影均为20&quot;)val cardAdapter = ArrayAdapter(this, R.layout.item_select, cardArray)        val spCard = findViewById&lt;Spinner&gt;(R.id.sp_card)        spCard.apply &#123;            prompt = &quot;请选择卡片类型&quot;            adapter = cardAdapter            onItemSelectedListener = CardSelectedListener()\t//响应用户选择            setSelection(0)\t//默认选择好的        &#125;\n\n监听用户选择internal inner class CardSelectedListener : AdapterView.OnItemSelectedListener &#123;    override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: View?, pos: Int, id: Long) &#123;        //pos为选择的位置    &#125;    override fun onNothingSelected(parent: AdapterView&lt;*&gt;) &#123;        // 没有选择    &#125;&#125;\n","categories":["Android"],"tags":["Android","View"]}]